@page "/"
@using BlazorMonaco
@using global::MonorailCss
@using System.Reactive.Subjects
@using System.Reactive.Linq
@using System.Text.RegularExpressions
@using BlazorMonaco.Bridge
@using JetBrains.Annotations
@inject IJSRuntime Js

<PageTitle>Try MonorailCss</PageTitle>
<div class="max-w-full h-full inset-4" style="display: grid;grid-template-columns: 1fr 6px 2fr;">
    <div class="grid grid-cols-1 grid-rows-2">
        <div class="flex flex-col">
            @HeaderMessage("HTML")
            <div class="flex-auto">
                <MonacoEditor @ref="HtmlEditor" Id="htmlEditor" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnInit" OnDidChangeModelContent="_processHtml.OnNext"/>
            </div>
        </div>
        <div class="flex flex-col border-t border-gray-700">
            @HeaderMessage("Generated CSS")
            <div class="flex-auto">
                <MonacoEditor @ref="CssEditor" Id="cssViewer" ConstructionOptions="ViewerConstructionOptions"/>
            </div>
        </div>
    </div>
    <div class="gutter-col-1 bg-slate-600 shadow-inner" style="grid-row: 1/-1;cursor: col-resize;grid-column: 2"></div>
    <div>
        <div class="h-screen w-full flex">
            <PreviewViewer @ref="@PreviewViewer" />
        </div>
    </div>
</div>

@code{
    private MonacoEditor HtmlEditor { get; set; } = null!;
    private MonacoEditor CssEditor { get; set; } = null!;
    private CompletionItem[] _allClasses = null!;

    private PreviewViewer PreviewViewer { get; set; } = null!;

    private readonly CssFramework _previewFramework = new CssFramework();
    private readonly CssFramework _framework = new(new CssFrameworkSettings()
    {
        Applies = new Dictionary<string, string>()
        {
            { "body", "font-sans" }
        }
    });

    private readonly Subject<ModelContentChangedEvent> _processHtml = new();

    private RenderFragment<string> HeaderMessage = message =>
        @<header class="flex-none px-6 py-4 bg-gray-800 text-gray-50 border-b border-gray-700">@message</header>;

    protected override void OnInitialized()
    {
        _allClasses = _framework.GetAllRules().Select(kvp => new CompletionItem()
        {
            Label = kvp.Key,
            Detail = kvp.Value,
            Preselect = false,
            InsertText = kvp.Key,
            Kind = CompletionItemKind.Text
        }).ToArray();

        _processHtml.Throttle(TimeSpan.FromMilliseconds(350))
            .SelectMany(_ => ModelChanged())
            .Subscribe(_ => { StateHasChanged(); });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Js.InvokeVoidAsync("initSplit");
        }

    }

    private StandaloneEditorConstructionOptions StandardOptions() => new()
    {
        AutomaticLayout = true,
        Language = "html",
        GlyphMargin = true,
        HighlightActiveIndentGuide = false,
        Scrollbar = new EditorScrollbarOptions() { HorizontalScrollbarSize = 8, VerticalScrollbarSize = 8, },
        FoldingHighlight = false,
        RenderLineHighlightOnlyWhenFocus = true,
        RenderLineHighlight = "none",
        FontFamily = "'Cascadia Code', Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace",
        FontWeight = "300",
        SuggestFontSize = 13,
        ColorDecorators = true,
        SuggestLineHeight = 17,
        FontSize = 15,
        Padding = new EditorPaddingOptions(){ Top = 4, Bottom = 4},
        Hover = new EditorHoverOptions()
        {
            Enabled = true,
            Delay = 100,
        },
        Minimap = new EditorMinimapOptions()
        {
            Enabled = false,
        },
        Folding = true,
        LineDecorationsWidth = "16px",
        Contextmenu = false,
        Theme = "my-custom-theme",
    };

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return StandardOptions();
    }

    private StandaloneEditorConstructionOptions ViewerConstructionOptions(MonacoEditor editor)
    {
        var opts = StandardOptions();
        opts.ReadOnly = true;
        opts.Language = "css";
        opts.ColorDecorators = false;
        return opts;
    }

    private async Task<bool> ModelChanged()
    {
        var htmlContent = await HtmlEditor.GetValue();

        const string regExPattern = @"class\s*=\s*[\'\""](?<value>[^<]*?)[\'\""]";
        var matches = Regex.Matches(htmlContent, regExPattern, RegexOptions.IgnoreCase);
        var results = new List<string>(matches.Count);
        for (var i = 0; i < matches.Count; i++)
        {
            results.Add(matches[i].Groups["value"].Captures[0].Value);
        }

        var (reset, css) = _framework.ProcessSplit(results);

        await CssEditor.SetValue(css);

        await PreviewViewer.UpdateAsync(htmlContent, $"{reset}{css}");

        return true;
    }

    private async Task EditorOnInit(MonacoEditorBase editor)
    {
        await MonacoEditorBase.DefineTheme("my-custom-theme", new StandaloneThemeData
        {
            Base = "vs-dark",
            Inherit = true,
            Rules = new List<TokenThemeRule>
            {
                new() { Background = "363636", Foreground = "E0E0E0" },
            },
            Colors = new Dictionary<string, string>
            {
                ["editor.background"] = "#FFFFFF00",
                ["editorCursor.foreground"] = "#E0E0E0",
                ["editorLineNumber.foreground"] = "#7A7A7A66",
                ["editorSuggestWidget.background"] = "#354771F0",
                ["editorSuggestWidget.selectedBackground"] = "#354771",
                ["editorSuggestWidget.selectedForeground"] = "#e2e6e6",
                ["editorSuggestWidget.foreground"] = "#e2e6e6",
                ["editorHoverWidget.background"] = "#232934",
                ["editorHoverWidget.border"] = "#374151"
            },
        });

        await MonacoEditorBase.SetTheme("my-custom-theme");
        await MonacoEditorBase.RegisterMonorailCompletionProvider(_allClasses);
        await MonacoEditorBase.RegisterHoverProviderAsync("html", async (uri, position) =>
        {
            var model = await MonacoEditorBase.GetModel(uri);

            // do we have a word we are hovering over? if not bail.
            var word = await model.GetWordAtPosition(position);
            if (word == null)
            {
                return null;
            }

            // check to see if we are hovering over something in a css class definition.
            var textUntilPosition = await model.GetValueInRange(new BlazorMonaco.Bridge.Range()
            {
                StartColumn = 1, StartLineNumber = 1, EndColumn = position.Column, EndLineNumber = position.LineNumber
            }, EndOfLinePreference.TextDefined);

            var match = Regex.Match(textUntilPosition, "<.*class\\s*=\\s*['|\"]([^\"]*)?$");

            if (!match.Success)
            {
                return null;
            }

            // we can't use the default model.getWordAtPosition because it uses a bunch of characters as delimiters
            // that we don't care about. so we'll get the current word and search for the first previous and last whitespace
            // by hand.
            var line = await model.GetLineContent(position.LineNumber);
            var splitChars = new[] { '\t', ' ', '\'', '\"' };
            var firstIndex = line.LastIndexOfAny(splitChars, word.StartColumn) + 1;
            var lastIndex = line.IndexOfAny(splitChars, word.EndColumn - 1);
            var w = line[firstIndex..lastIndex];
            var css = _previewFramework.ProcessSplit(new[] { w });

            // return the word with a custom range matching our calculations.
            return new Hover()
            {
                Contents = new []
                {
                    new MarkdownString { Value = $"**CSS**", Uris = uri, IsTrusted = true, SupportThemeIcons = false },
                    new MarkdownString { Value = $"```css\n{css.Utilities}\n```", Uris = uri, IsTrusted = true, SupportThemeIcons = false }
                },
                Range = new BlazorMonaco.Bridge.Range()
                {
                    StartLineNumber = position.LineNumber,
                    EndLineNumber = position.LineNumber,
                    StartColumn = firstIndex + 1,
                    EndColumn = lastIndex + 1
                }
            };
        });

        await HtmlEditor.SetValue(@"
<!--
    Welcome to Monorail Play. Feel free to edit the HTML below and watch the
    preview and generated CSS change as you edit.
-->
<div class=""grid place-items-center h-screen w-full bg-gradient-to-bl from-slate-600 via-sky-500 to-sky-300"">
    <div class=""text-slate-800 text-sm md:text-base border border-slate-700/20 px-8 py-4 bg-gray-100 sm:rounded-lg md:rounded-xl lg:rounded-2xl shadow-xl"">
        <h2 class=""text-2xl md:text-4xl font-extrabold mb-4"">Welcome to Monorail<span class=""text-sky-500"">CSS</span></h2>

        <ul class=""list-disc list-inside  mb-8"">
            <li>Fully .NET utility-first CSS Framework.</li>
            <li>No javascript. No SASS. No bundlers. No NPM.</li>
            <li>Fast - can be executed at runtime in milliseconds.
            <li>Aims to be compatible with TailwindCSS utility syntax.</li>
        </ul>
        <p>Find out more at <a class=""text-sky-600"" href=""https://github.com/monorailcss/MonorailCss.Framework"">https://github.com/monorailcss/MonorailCss.Framework</a></p>
    </div>
</div>".Trim());
    }
}
