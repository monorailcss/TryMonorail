@page "/"
@using BlazorMonaco
@using global::MonorailCss
@using System.Reactive.Subjects
@using System.Reactive.Linq
@using System.Text.RegularExpressions
@inject IJSRuntime JS


<PageTitle>Try MonorailCss</PageTitle>

<div class="max-w-full h-full inset-4" style="display: grid;grid-template-columns: 1fr 6px 2fr;">
    <div class="grid grid-cols-1 grid-rows-2">
        <div class="flex flex-col">
            <header class="flex-none px-6 py-4 bg-gray-800 text-gray-50 border-b border-gray-700">HTML</header>
            <div class="flex-auto">
                <MonacoEditor @ref="HtmlEditor" Id="htmlEditor" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnInit" OnDidChangeModelContent="_processHtml.OnNext"/>
            </div>
        </div>
        <div class="flex flex-col border-t border-gray-700">
            <header class="flex-none px-6 py-4 bg-gray-800 text-gray-50 border-b border-gray-700">Generated CSS</header>
            <div class="flex-auto">
                <MonacoEditor @ref="CssEditor" Id="cssViewer" ConstructionOptions="ViewerConstructionOptions" OnDidInit="EditorOnInit"/>
            </div>
        </div>
    </div>
    <div class="gutter-col-1 bg-slate-600 shadow-inner" style="grid-row: 1/-1;cursor: col-resize;grid-column: 2"></div>
    <div>
        <div class="h-full w-full flex">
            <iframe @ref="PreviewViewer" class="flex-1 h-full w-full bg-white" sandbox="allow-popups-to-escape-sandbox allow-scripts allow-popups allow-forms allow-pointer-lock allow-top-navigation allow-modals" srcdoc="@HtmlContents"></iframe>
        </div>
    </div>
</div>

@code{
    private MonacoEditor HtmlEditor { get; set; } = null!;
    private MonacoEditor CssEditor { get; set; } = null!;
    private ElementReference PreviewViewer { get; set; }
    private string HtmlContents { get; set; } = string.Empty;

    private readonly CssFramework _framework = new CssFramework(new CssFrameworkSettings()
    {
        Applies = new Dictionary<string, string>()
        {
            { "body", "font-sans" }
        }
    });

    private readonly Subject<ModelContentChangedEvent> _processHtml = new();

    protected override void OnInitialized()
    {
        HtmlContents = PreviewHtml;

        _processHtml.Throttle(TimeSpan.FromMilliseconds(350))
            .SelectMany(_ => ModelChanged())
            .Subscribe(_ => { StateHasChanged(); });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initSplit");
        }

    }

    private StandaloneEditorConstructionOptions StandardOptions() => new()
    {
        AutomaticLayout = true,
        Language = "html",
        GlyphMargin = true,
        HighlightActiveIndentGuide = false,
        Scrollbar = new EditorScrollbarOptions() { HorizontalScrollbarSize = 8, VerticalScrollbarSize = 8, },
        FoldingHighlight = false,
        RenderLineHighlightOnlyWhenFocus = true,
        RenderLineHighlight = "none",
        FontFamily = "'Cascadia Code', Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace",
        FontWeight = "300",
        FontSize = 15,
        Padding = new EditorPaddingOptions(){ Top = 4, Bottom = 4},
        Hover = new EditorHoverOptions()
        {
            Enabled = true,
            Delay = 100,
        },
        Minimap = new EditorMinimapOptions()
        {
            Enabled = false,
        },
        Folding = true,
        LineDecorationsWidth = "16px",
        Contextmenu = false,
        Theme = "my-custom-theme"
    };

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return StandardOptions();
    }

    private StandaloneEditorConstructionOptions ViewerConstructionOptions(MonacoEditor editor)
    {
        var opts = StandardOptions();
        opts.ReadOnly = true;
        opts.Language = "css";
        opts.ColorDecorators = false;
        return opts;
    }

    private async Task<bool> ModelChanged()
    {
        var htmlContent = await HtmlEditor.GetValue();

        const string regExPattern = @"class\s*=\s*[\'\""](?<value>[^<]*?)[\'\""]";
        var matches = Regex.Matches(htmlContent, regExPattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
        var results = new List<string>(matches.Count);
        for (var i = 0; i < matches.Count; i++)
        {
            results.Add(matches[i].Groups["value"].Captures[0].Value);
        }

        var (reset, css) = _framework.ProcessSplit(results);

        await CssEditor.SetValue(css);

        var previewData = new PreviewData
        {
            Html = htmlContent,
            Css = $"{reset}{css}"
        };

        await JS.InvokeVoidAsync("postPreviewMessage", PreviewViewer, previewData);

        return true;
    }

    private async Task EditorOnInit(MonacoEditorBase editor)
    {
        await MonacoEditorBase.DefineTheme("my-custom-theme", new StandaloneThemeData
        {
            Base = "vs-dark",
            Inherit = true,
            Rules = new List<TokenThemeRule>
            {
                new() { Background = "363636", Foreground = "E0E0E0" },
            },
            Colors = new Dictionary<string, string>
            {
                ["editor.background"] = "#FFFFFF00",
                ["editorCursor.foreground"] = "#E0E0E0",
                ["editorLineNumber.foreground"] = "#7A7A7A66"
            },
        });

        await MonacoEditor.SetTheme("my-custom-theme");
        await HtmlEditor.SetValue(@"
<!--
    Welcome to Monorail Play. Feel free to edit the HTML below and watch the
    preview and generated CSS change as you edit.
-->
<div class=""grid place-items-center h-screen w-full bg-gradient-to-bl from-slate-600 via-sky-500 to-sky-300"">
    <div class=""text-slate-800  text-sm md:text-base border border-slate-700/20 px-8 py-4 bg-gray-100 sm:rounded-lg md:rounded-xl lg:rounded-2xl shadow-xl"">
        <h2 class=""text-2xl md:text-4xl font-extrabold mb-4"">Welcome to Monorail<span class=""text-sky-500"">CSS</span></h2>

        <ul class=""list-disc list-inside  mb-8"">
            <li>Fully .NET utility-first CSS Framework.</li>
            <li>No javascript. No SASS. No bundlers. No NPM.</li>
            <li>Fast - can be executed at runtime in milliseconds.
            <li>Aims to be compatible with TailwindCSS utility syntax.</li>
        </ul>
        <p>Find out more at <a class=""text-sky-600"" href=""https://github.com/monorailcss/MonorailCss.Framework"">https://github.com/monorailcss/MonorailCss.Framework</a></p>
    </div>
</div>".Trim());
    }

    class PreviewData
    {
        public string Css { get; init; } = string.Empty;
        public string Html { get; init; } = string.Empty;
    }

    const string PreviewHtml = @"
<!-- adapted from https://github.com/tailwindlabs/play.tailwindcss.com/blob/master/src/components/Preview.js -->
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
    <style id=""_style""></style>
    <script>
        var hasHtml = false
        var hasCss = false
        var visible = false
        window.addEventListener('message', (e) => {
            if (typeof e.data.clear !== 'undefined') {
                setHtml()
                setCss()
                checkVisibility()
                return
            }
            if (typeof e.data.css !== 'undefined') {
                setCss(e.data.css)
            }
            if (typeof e.data.html !== 'undefined') {
                setHtml(e.data.html)
            }
            checkVisibility()
        })
        function checkVisibility() {
            if (!visible && hasHtml && hasCss) {
                visible = true
                document.body.style.display = ''
            } else if (visible && (!hasHtml || !hasCss)) {
                visible = false
                document.body.style.display = 'none'
            }
        }
        function setHtml(html) {
            if (typeof html === 'undefined') {
                document.body.innerHTML = ''
                hasHtml = false
            } else {
                document.body.innerHTML = html
                hasHtml = true
            }
        }
        function setCss(css) {
            const style = document.getElementById('_style')
            const newStyle = document.createElement('style')
            newStyle.id = '_style'
            newStyle.innerHTML = typeof css === 'undefined' ? '' : css
            style.parentNode.replaceChild(newStyle, style)
            hasCss = typeof css === 'undefined' ? false : true
        }
    </script>
</head>
<body style=""display:none"">
</body>
<script>
    // https://github.com/sveltejs/svelte-repl/blob/master/src/Output/srcdoc/index.html
    // https://github.com/sveltejs/svelte-repl/blob/master/LICENSE
    document.body.addEventListener('click', event => {
        if (event.which !== 1) return;
        if (event.metaKey || event.ctrlKey || event.shiftKey) return;
        if (event.defaultPrevented) return;

        // ensure target is a link
        let el = event.target;
        while (el && el.nodeName !== 'A') el = el.parentNode;
        if (!el || el.nodeName !== 'A') return;

        if (el.hasAttribute('download') || el.getAttribute('rel') === 'external' || el.target) return;

        event.preventDefault();
        window.open(el.href, '_blank');
    });
</script>
</html>
";
}

